datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Influencer {
  id            String   @id @default(cuid())
  name          String
  avatar        String?
  bio           String?
  category      String
  trustScore    Float
  followers     Int
  yearlyRevenue Float?
  products      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  topics        Topic[]
  claims        Claim[]
  tweets        Tweet[]
}

model Topic {
  id          String      @id @default(cuid())
  name        String      @unique
  influencers Influencer[]
}

model Claim {
  id           String   @id @default(cuid())
  content      String
  status       String
  trustScore   Float
  date         DateTime @default(now())
  analysis     String?
  influencer   Influencer @relation(fields: [influencerId], references: [id])
  influencerId String
  category     String
  sources      Source[]

  @@index([influencerId])
}

model Source {
  id      String @id @default(cuid())
  url     String
  title   String?
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String

  @@index([claimId])
}

model ResearchTask {
  id               String   @id @default(cuid())
  researchType     String
  timeRange        String?  // Changed to optional
  influencerName   String?
  claimsToAnalyze  Int
  productsToFind   Int
  includeRevenue   Boolean
  verifyScientific Boolean
  selectedJournals String[]
  notes            String?
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Tweet {
  id        String   @id @default(cuid())
  tweetId   String   @unique
  content   String
  createdAt DateTime
  influencerId String
  influencer Influencer @relation(fields: [influencerId], references: [id])

  @@index([influencerId])
}

